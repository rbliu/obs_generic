#<?cfg paf policy ?>

needCalibRegistry: true

camera:     "../megacam/camera/"
defects:    "../megacam/defects"

skytiles: {
    resolutionPix: 700    # Resolution for skytiles: 700 --> 500 arcsec sides
    paddingArcsec: 10.0   # Overlap between skytiles
}

levels: {
    # Keys that are NOT relevant for a particular level
    skyTile: "visit" "ccd"
    tract: "patch"
    visit: "ccd" "extension" "state"
    sensor: "none"
}
defaultLevel: "Ccd"
defaultSubLevels: {
    # Default sublevel for dataRef.subItems()
    skyTile: "Ccd"
    visit: "Ccd"
    sensor: "none"
}

exposures: {
    raw: {
        template:    "raw/%(runId)s/%(object)s/%(date)s/%(filter)s/%(visit)d%(state)1s.fits.fz[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "state"
        columns:     "ccd"
    }
    postISRCCD: {
        template:    "postISRCCD/%(runId)s/%(object)s/%(date)s/%(filter)s/postISRCCD-%(visit)d-%(ccd)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccd"
    }
    icExp: {
        template:    "icExp/%(runId)s/%(object)s/%(date)s/%(filter)s/icExp-%(visit)d-%(ccd)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccd"
    }
    calexp: {
        template:    "calexp/%(runId)s/%(object)s/%(date)s/%(filter)s/calexp-%(visit)d-%(ccd)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccd"
    }
    wcs: {
        template:    "calexp/%(runId)s/%(object)s/%(date)s/%(filter)s/%(tract)d/wcs-%(visit)d-%(ccd)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit" "ccd"
    }

    deepCoadd: {
        template:      "deepCoadd/%(filter)s/%(tract)d/%(patch)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        level:         "Skytile"
        tables:        "raw"
    }

    deepCoadd_tempExp: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/warp-%(filter)s-%(tract)d-%(patch)s-%(visit)d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      "raw"
    }

    deep_processCoadd: {
        template:      "processCoadd/%(filter)s/%(tract)d/%(patch)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        level:         "Skytile"
        tables:        "raw"
    }

    deepCoadd_calexp: {
        template:    "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/calexp-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      "raw"
    }

}

calibrations: {
    bias: {
        template:    "%(path)s[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "bias"
        columns:     "taiObs"
        columns:     "extension"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "taiObs"
        refCols:     "extension"
        filter:      false
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    dark: {
        template:    "%(path)s[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "dark"
        columns:     "taiObs"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "taiObs"
        refCols:     "extension"
        filter:      false
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    flat: {
        template:    "%(path)s[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "flat"
        columns:     "filter"
        columns:     "taiObs"
        columns:     "extension"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "filter"
        refCols:     "taiObs"
        refCols:     "extension"
        filter:      true
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    fringe: {
        template:    "%(path)s[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "fringe"
        columns:     "filter"
        columns:     "taiObs"
        columns:     "extension"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "filter"
        refCols:     "taiObs"
        refCols:     "extension"
        filter:      true
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
}

datasets: {
    psf: {
        template:      "psf/%(runId)s/%(object)s/%(date)s/%(filter)s/PSF-%(visit)d-%(ccd)02d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw"
    }
    apCorr: {
        template:      "apCorr/%(runId)s/%(object)s/%(date)s/%(filter)s/APC-%(visit)d-%(ccd)02d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:   "ApertureCorrection"
        storage:       "PickleStorage"
        tables:        "raw"
    }
    src: {
        template:      "src/%(runId)s/%(object)s/%(date)s/%(filter)s/SRC-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    src_schema: {
        template:      "schema/src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    icMatch: {
        template:      "icMatch/%(runId)s/%(object)s/%(date)s/%(filter)s/ICMATCH-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    srcMatch: {
        template:      "srcMatch/%(runId)s/%(object)s/%(date)s/%(filter)s/SRCMATCH-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    icSrc: {
        template:      "icSrc/%(runId)s/%(object)s/%(date)s/%(filter)s/ICSRC-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    icSrc_schema: {
        template:      "schema/icSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    modelfits: {
        template:      "modelfits/%(runId)s/%(object)s/%(date)s/%(filter)s/modelfits-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    modelfits_schema: {
        template:      "schema/modelfits.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    icExpBackground: {
        template:      "icExp/%(runId)s/%(object)s/%(date)s/%(filter)s/bkgd-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    calexpBackground: {
        template:      "calexp/%(runId)s/%(object)s/%(date)s/%(filter)s/bkgd-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_modelfits: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/modelfits-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_modelfits_schema: {
        template:      "schema/deepCoadd_modelfits.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_multiModelfits: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/multiModelfits-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_multiModelfits_schema: {
        template:      "schema/deepCoadd_multiModelfits.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    log: {
        template:      "logs/%(runId)s/%(object)s/%(date)s/%(filter)s/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "logs/%(runId)s/%(object)s/%(date)s/%(filter)s/"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }

    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepMergedCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepMergedCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    stackExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    stackExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    processCcd_config: {
        template:      "config/processCcd.py"
        python:        "lsst.pipe.tasks.processCcd.ProcessCcdConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    processCcd_metadata: {
        template:      "metadata/%(runId)s/%(object)s/%(date)s/%(filter)s/MD-processCcd-%(visit)d-%(ccd)02d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        "raw"
    }
    deepCoadd_depth: {
        template:      "deepCoadd/%(tract)d/%(patch)s.depth.fits"
        python:        "lsst.afw.image.ImageF"
        persistable:   "ImageF"
        storage:       "FitsStorage"
        tables:        "raw"
    }
    deepCoadd_psf: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/psf-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw"
    }
    deepCoadd_skyMap: {
        template:      "deepCoadd/skyMap.pickle"
        python:        "lsst.skymap.BaseSkyMap"
        persistable:   "ignored"
        storage:       "PickleStorage"
        tables:        "raw"
    }
    deep_makeSkyMap_config: {
        template:      "config/deep_makeSkyMap.py"
        python:        "lsst.pipe.tasks.makeSkyMap.MakeSkyMapTask.ConfigClass"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    deep_makeSkyMap_metadata: {
        template:      "metadata/deep_makeSkyMap.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    deep_makeCoaddTempExp_config: {
        template:      "config/deep_makeCoaddTempExp.py"
        python:        "lsst.pipe.tasks.makeCoaddTempExp.MakeCoaddTempExpConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
    }
    deep_safeClipAssembleCoadd_config: {
        template:      "config/deep_safeClipAssembleCoadd.py"
        python:        "lsst.pipe.tasks.assembleCoadd.AssembleCoaddConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    deep_makeCoaddTempExp_metadata: {
        template:      "deep_makeCoaddTempExp_metadat/%(filter)s/%(tract)d/%(patch)s_metadata.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
    }
    deep_safeClipAssembleCoadd_metadata: {
        template:      "deep_assembleCoadd_metadata/%(filter)s/%(tract)d/%(patch)s_metadata.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
    }
    deep_assembleCoadd_config: {
        template:      "config/deep_assembleCoadd.py"
        python:        "lsst.pipe.tasks.assembleCoadd.AssembleCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_assembleCoadd_metadata: {
        template:      "deep_assembleCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_processCoadd_config: {
        template:      "config/deep_processCoadd.py"
        python:        "lsst.pipe.tasks.processCoadd.ProcessCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_icSrc: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/icSrc-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    deepCoadd_icSrc_schema: {
        template:      "schema/deepCoadd_icSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_icMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/icMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    deepCoadd_src_schema: {
        template:      "schema/deepCoadd_src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_processCoadd_metadata: {
        template:      "deep_processCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_calexp_background: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/bkgd-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_srcMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    deepCoadd_src: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/src-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    forced_src: {
        template:      "forced/%(runId)s/%(object)s/%(date)s/%(filter)s/%(tract)d/FORCEDSRC-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_visit
    }
    forced_src_schema: {
        template:      "schema/forced_src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
    }
    forcedPhotCcd_config: {
        template:      "config/forcedPhotCcd.py"
        python:        "lsst.meas.base.forcedPhotCcd.ForcedPhotCcdConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    forcedPhotCoadd_config: {
        template:      "config/forcedPhotCoadd.py"
        python:        "lsst.meas.base.forcedPhotCoadd.ForcedPhotCoaddConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    forcedPhot_metadata: {
        template:      "forced/%(runId)s/%(object)s/%(date)s/%(filter)s/%(tract)d/forcedPhotCcd_metadata/%(visit)d-%(ccd)02d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }
    deepCoadd_forced_src: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/forced_src-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    deepCoadd_forced_src_schema: {
        template:      "schema/deepCoadd_forced_src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
    }
    deepCoadd_forced_config: {
        template:      "config/forcedPhotCoadd.py"
        python:        "lsst.meas.base.forcedPhotCoadd.ForcedPhotCoaddConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    deepCoadd_forced_metadata: {
        template:      "deepCoadd_forcedPhotCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }
    # Detections on coadds
    deepCoadd_det: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/det-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    detectCoaddSources_config: {
        template:      "config/detect.py"
        python:        "lsst.pipe.tasks.multiBand.DetectCoaddSourcesConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    detectCoaddSources_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/detectMD-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    deepCoadd_det_schema: {
        template:      "schema/deepCoadd_det.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }

    # Merged detections on coadds
    deepCoadd_mergeDet: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeDet-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    mergeCoaddDetections_config: {
        template:      "config/mergeDetect.py"
        python:        "lsst.pipe.tasks.multiBand.MergeDetectionsConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    mergeCoaddDetections_metadata: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeDetMD-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_mergeDet_schema: {
        template:      "schema/deepCoadd_mergeDet.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }
    deepCoadd_peak_schema: {
        template:      "schema/deepCoadd_peak.fits"
        python:        "lsst.afw.detection.PeakCatalog"
        persistable:   "PeakCatalog"
        storage:       "FitsCatalogStorage"
    }

    # Measurements on coadds
    deepCoadd_meas: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/meas-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    measureCoaddSources_config: {
        template:      "config/measureMerged.py"
        python:        "lsst.pipe.tasks.multiBand.MeasureMergedCoaddSourcesConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    measureCoaddSources_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/measMD-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_meas_schema: {
        template:      "schema/deepCoadd_meas.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }

    # Reference catalog for coadds
    deepCoadd_ref: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/ref-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    mergeCoaddMeasurements_config: {
        template:      "config/mergeMeasure.py"
        python:        "lsst.pipe.tasks.multiBand.MergeMeasurementsConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    mergeCoaddMeasurements_metadata: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeMeasMD-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_ref_schema: {
        template:      "schema/deepCoadd_ref.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }

    multiband_config: {
        template:      "config/multiband.py"
        python:        "lsst.pipe.tasks.multiBand.MultiBandConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    singleFrameDriver_config: {
        template:      "config/singleFrameDriver.py"
        python:        "lsst.pipe.drivers.singleFrameDriver.SingleFrameDriverConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    singleFrameDriver_metadata: {
        template:      "%(pointing)05d/%(filter)s/singleFrameDriver_metadata/%(visit)07d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw  
        tables:        raw_visit
    } 
    brightObjectMask: {
        template:      "deepCoadd/BrightObjectMasks/%(tract)d/BrightObjectMask-%(tract)d-%(patch)s-%(filter)s.reg"
        python:        "lsst.pipe.tasks.objectMasks.ObjectMaskCatalog"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
    }
}
